/* NAME: printFloatTuple
   ARGUMENTS: Pointer to float tuple (@variable_name) and tuple length
   EXECUTES: Prints the values of the tuple, each on a new line
   RETURNS: VOID
*/
void printFloatTuple(float[] x,  int len) {
  int i;
  float f;

  printssl("[");

  for (i = 0; i < len; i = i + 1) {
    f = $x;
		printfsl(f);

    if (i != len - 1) {
      printssl(", ");
    }

	  x = x.+;
  }

  prints("]");
}
/* NAME: printIntTuple
   ARGUMENTS: Pointer to int tuple (@variable_name) and tuple length
   EXECUTES: Prints the values of the tuple, each on a new line
   RETURNS: VOID
*/
void printIntTuple(int[] x,  int len) {
  int i;
  int f;

  printssl("[");

  for (i = 0; i < len; i = i + 1) {
    f = $x;
		printsl(f);

    if (i != len - 1) {
      printssl(", ");
    }

		x = x.+;
  }

  prints("]");
}

/* NAME: printIntMatrix
   ARGUMENTS: Pointer to int matrix (@@x), number of rows (int), number of columns (int)
   EXECUTES: Prints the values of the contents of the matrix. Each row on a new line and each
             ([|...|]).
   RETURNS: void
*/

void printIntMatrix(int[][] x, int r, int c) {
  int len;
  int i;
  int j;

  len = r * c;

  printssl("[| ");

  for (i = 0; i < r; i = i + 1) {
    for (j = 0; j < c; j = j + 1) {
      if (j != c - 1) {
        printsl($x);
        printssl(", ");
        x = x.+;
      } else {
        printsl($x);
        if (i != r - 1) {
          prints("");
        }
      }
    }
    if (i != r - 1) {
      printssl(" | ");
    }
    x = x.+;
  }

  prints(" |]");
}

/* NAME: printFloatMatrix
   ARGUMENTS: Pointer to int matrix (@@x), number of rows (int), number of columns (int)
   EXECUTES: Prints the values of the contents of the matrix. Each row on a new line and each
             ([|...|]).
   RETURNS: void
*/

void printFloatMatrix(float[][] x, int r, int c) {
  int len;
  int i;
  int j;

  len = r * c;

  printssl("[| ");

  for (i = 0; i < r; i = i + 1) {
    for (j = 0; j < c; j = j + 1) {
      if (j != c - 1) {
        printfsl($x);
        printssl(", ");
        x = x.+;
      } else {
        printfsl($x);
        if (i != r - 1) {
          prints("");
        }
      }
    }
    if (i != r - 1) {
      printssl(" | ");
    }
    x = x.+;
  }

  prints(" |]");
}

/* NAME: printIntTupMatrix
   ARGUMENTS: Pointer to int tuple matrix (@@@x), number of rows (int), number of columns (int), length of tuple (int)
   EXECUTES: Prints the values of the contents of the matrix. Each row on a new line and formatted with ppm output in mind
   RETURNS: void
*/

void printIntTupleMatrix(int[][][] x, int r, int c, int l) {
  int len;
  int i;
  int k;
  k = 1;
  len = r * c * l;


    for(i = 0; i < len; i= i + 1 ){
        if (i != (c * l * k) - 1) {
            printsl($x);
            printssl(" ");
            x = x.+;
        } else {
            printsl($x);
            x = x.+;
            k = k + 1;
            prints("");
            }
        }
    }

/* NAME: addIntTuples
   ARGUMENTS: Pointer to int tuple (@x), Pointer to int tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Adds the contents of y to the contents of x; updating x in memory
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void addIntTuples(int[] x, int[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x + $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}


/* NAME: subtractIntTuples
   ARGUMENTS: Pointer to int tuple (@x), Pointer to int tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Subtracts the contents of y from the contents of x; updating x in memory
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void subtractIntTuples(int[] x, int[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x - $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}

/* NAME: multiplyIntTuples
   ARGUMENTS: Pointer to int tuple (@x), Pointer to int tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Multiply the contents of y with the contents of x; updating x in memory
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void multiplyIntTuples(int[] x, int[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x * $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}

/* NAME: divideIntTuples
   ARGUMENTS: Pointer to int tuple (@x), Pointer to int tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Divide x by y; updating x in memory and tossing the remainder
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void divideIntTuples(int[] x, int[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x / $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}


/* NAME: addFloatTuples
   ARGUMENTS: Pointer to float tuple (@x), Pointer to float tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Add the contents of y to the contents of x; updating x in memory
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void addFloatTuples(float[] x, float[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x + $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}

/* NAME: subtractFloatTuples
   ARGUMENTS: Pointer to float tuple (@x), Pointer to float tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Subtract the contents of y from the contents of x; updating x in memory
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void subtractFloatTuples(float[] x, float[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x - $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}


/* NAME: multiplyFloatTuples
   ARGUMENTS: Pointer to float tuple (@x), Pointer to float tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Multiply the contents of y by the contents of x; updating x in memory
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void multiplyFloatTuples(float[] x, float[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x * $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}


/* NAME: divideFloatTuples
   ARGUMENTS: Pointer to float tuple (@x), Pointer to float tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Divide the contents of x by the contents of y; updating x in memory; toss remainder
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void divideFloatTuples(float[] x, float[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x / $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}


/* NAME: addIntMatrices
   ARGUMENTS: Pointer to int matrix (@@x), pointer to int matrix (@@y)
 	           number of rows (int), number of columns (int)
   EXECUTES: Add each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the sum.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both matrices must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void addIntMatrices(int[][] x, int[][] y, int r, int c) {
	int len;
	int i;

	len = r * c;

	for(i = 0; i < len; i = i + 1) {
		$x = $x + $y;
		x = x.+;
		y = y.+;
	}
}



/* NAME: subtractIntMatrices
   ARGUMENTS: Pointer to int matrix (@@x), pointer to int matrix (@@y)
 	           number of rows (int), number of columns (int)
   EXECUTES: Subtract each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the difference.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both matrices must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void subtractIntMatrices(int[][] x, int[][] y, int r, int c) {
	int len;
	int i;

	len = r * c;

	for(i = 0; i < len; i = i + 1) {
		$x = $x - $y;
		x = x.+;
		y = y.+;
	}
}


/* NAME: multiplyIntMatrices
   ARGUMENTS: Pointer to int matrix (@@x), pointer to int matrix (@@y)
 	           number of rows (int), number of columns (int)
   EXECUTES: Multiply  each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the product.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both matrices must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void multiplyIntMatrices(int[][] x, int[][] y, int r, int c) {
	int len;
	int i;

	len = r * c;

	for(i = 0; i < len; i = i + 1) {
		$x = $x * $y;
		x = x.+;
		y = y.+;
	}
}


/* NAME: divideIntMatrices
   ARGUMENTS: Pointer to int matrix (@@x), pointer to int matrix (@@y)
 	           number of rows (int), number of columns (int)
   EXECUTES: Divide  each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the quotient. Tosses the remainder.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both matrices must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void divideIntMatrices(int[][] x, int[][] y, int r, int c) {
	int len;
	int i;

	len = r * c;

	for(i = 0; i < len; i = i + 1) {
		$x = $x / $y;
		x = x.+;
		y = y.+;
	}
}

/* NAME: addFloatMatrices
   ARGUMENTS: Pointer to float matrix (@@x), pointer to float matrix (@@y)
             number of rows (int), number of columns (int)
   EXECUTES: Add each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the sum.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both tuples must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void addFloatMatrices(float[][] x, float[][] y, int r, int c) {
  int len;
  int i;

  len = r * c;

  for(i = 0; i < len; i = i + 1) {
    $x = $x + $y;
    x = x.+;
    y = y.+;
  }
}


/* NAME: multiplyFloatMatrices
   ARGUMENTS: Pointer to float matrix (@@x), pointer to float matrix (@@y)
             number of rows (int), number of columns (int)
   EXECUTES: Multiply each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the sum.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both tuples must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void multiplyFloatMatrices(float[][] x, float[][] y, int r, int c) {
  int len;
  int i;

  len = r * c;

  for(i = 0; i < len; i = i + 1) {
    $x = $x * $y;
    x = x.+;
    y = y.+;
  }
}


/* NAME: divideFloatMatrices
   ARGUMENTS: Pointer to float matrix (@@x), pointer to float matrix (@@y)
             number of rows (int), number of columns (int)
   EXECUTES: Divide each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the sum. Tosses the remainder.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both tuples must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void divideFloatMatrices(float[][] x, float[][] y, int r, int c) {
  int len;
  int i;

  len = r * c;

  for(i = 0; i < len; i = i + 1) {
    $x = $x / $y;
    x = x.+;
    y = y.+;
  }
}

/* NAME: threshHold
   ARGUMENTS: Pointer to tuple matrix (@@@x), number of rows (int), number of columns (int),
              length of tuple(int), pointer to tuple with lowerbound values (@lowerBounds),
              pointer to tuple with upperbound values
   EXECUTES: If the red, green, and blue elements are all within the ranges for the tuples
              (red bound, green bound, blue bound) then all values are set to 0 (ie black pixel)
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
*/
void threshHold(int[][][] x, int r, int c, int l, int[] lowerBounds, int[] upperBounds) {
  int len;
  int i;
  int j;
  int  k;
  int[3] pix;
  int el1;
  int el2;
  int el3;
  int avg;
  int[][][] a;
  int rLower;
  int gLower;
  int bLower;
  int rUpper;
  int gUpper;
  int bUpper;

  rLower=$lowerBounds;
  lowerBounds=lowerBounds.+;
  gLower=$lowerBounds;
  lowerBounds=lowerBounds.+;
  bLower=$lowerBounds;

  rUpper=$upperBounds;
  upperBounds=upperBounds.+;
  gUpper=$upperBounds;
  upperBounds=upperBounds.+;
  bUpper=$upperBounds;  

  len = r * c * l;


  for (i = 0; i < len / 3; i = i + 1) {
    a = x;
    el1 = $a;
    a = a.+;
    el2 = $a;
    a= a.+;
    el3 = $a;

    if (el1>rLower && el1<rUpper && el2>gLower && el2<gUpper && el3>bLower && el3<bUpper){
      $x=0;
      x = x.+;
      $x =0;
      x = x.+;
      $x = 0;
      x = x.+;
    }
    else {
      x = x.+;
      x = x.+;
      x = x.+;
    }

  }

}


/* NAME: subtractFloatMatrices
   ARGUMENTS: Pointer to float matrix (@@x), pointer to float matrix (@@y)
             number of rows (int), number of columns (int)
   EXECUTES: Subtracts each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the sum.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both tuples must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void subtractFloatMatrices(float[][] x, float[][] y, int r, int c) {
  int len;
  int i;

  len = r - c;

  for(i = 0; i < len; i = i + 1) {
    $x = $x / $y;
    x = x.+;
    y = y.+;
  }
}

/* Scalar Operations */

/* NAME: scalarMultiplyIntMatrix
   ARGUMENTS: Pointer to int matrix (@@@x), number of rows(int), number of columns(int), scalar (int).
   EXECUTES: Scalar multiplies an int matrix
   RETURNS: VOID; the matrix passed in is updated in memory; nothing is returned.
*/
void scalarMultiplyIntMatrix(int[][] x, int r, int c, int scalar) {
  int i;
  int j;

  for (i = 0; i < r; i = i + 1) {
    for (j = 0; j < c; j = j + 1) {
      $x = $x * scalar;
      x = x.+;
    }
  }
}

/* NAME: scalarMultiplyFloatMatrix
   ARGUMENTS: Pointer to float matrix (@@@x), number of rows(int), number of columns(int), scalar (float).
   EXECUTES: Scalar multiplies a float matrix
   RETURNS: VOID; the matrix passed in is updated in memory; nothing is returned.
*/
void scalarMultiplyFloatMatrix(float[][] x, int r, int c, float scalar) {
  int i;
  int j;

  for (i = 0; i < r; i = i + 1) {
    for (j = 0; j < c; j = j + 1) {
      $x = $x * scalar;
      x = x.+;
    }
  }
}

/* NAME: bwIntTupleMatrix
   ARGUMENTS: Pointer to float matrix (@@@x), number of rows(int), number of columns(int), length of tuple (int) number of rows (int), number of columns (int).
   EXECUTES: Makes a matrix "black" and "white" by taking each int tuple, and getting the RGB average, and updated each element in the int tuple with calculated average.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned.
   NOTE: This is intended for an int tuple matrix where the tuple's length=3.
*/

void bwIntTupleMatrix(int[][][] x, int r, int c, int l) {
  int len;
  int i;
  int j;
  int  k;
  int[3] pix;
  int el1;
  int el2;
  int el3;
  int avg;
  int[][][] a;

  len = r * c * l;

  for (i = 0; i < len / 3; i = i + 1) {
    a = x;
    el1 = $a;
    a = a.+;
    el2 = $a;
    a= a.+;
    el3 = $a;
    avg = (el1+el2+el3)/3;

    $x=avg;
    x = x.+;
    $x =avg;
    x = x.+;
    $x = avg;
    x = x.+;
  }

}

/* NAME: detThree
   ARGUMENTS: Pointer to int matrix (@@x)
   EXECUTES: Calculates the determinant of a 3x3 matrix using Sarrus's rule
   RETURNS: INT; resturns the determinant (an integer)
   NOTE: Only accepts 3x3 matrix because Sarrus's Rule only for 3x3.
*/
int detThree(int[][] x){
  int a;
  int b;
  int c;
  int d;
  int e;
  int f;
  int g;
  int h;
  int i;
  int sum;
  a = $x;
  x = x.+;
  b = $x;
  x = x.+;
  c = $x;
  x = x.+;
  d = $x;
  x = x.+;
  e = $x;
  x = x.+;
  f = $x;
  x = x.+;
  g = $x;
  x = x.+;
  h = $x;
  x = x.+;
  i = $x;

  sum = (a * e * i) + (b * f * g) + (c * d * h) - (c * e * g) - (a * f * h) - (b * d * i);

  return sum;
}


/* NAME: out
   ARGUMENTS: Pointer to int tuple matrix (@@@m), int rows, int columns, int length
   EXECUTES: Writes an int tuple matrix out to an image, in the format of a  P3 ppm file.
   RETURNS: VOID
   NOTE: Only accepts int tuple matrix because P3 ppm file is composed of pixels. */
void out(int[][][] m, int r, int c, int l) {
  int i;
  int j;
  int k;

  prints("P3");
  printsl(r);
  printssl(" ");
  print(c);
  prints("255");

  for (i = 0; i < r; i = i + 1) {
   for (j = 0; j < c; j = j + 1) {
     for (k = 0; k < l; k = k + 1) {
       printsl($m);
       printssl(" ");
       m = m.+;
     }
   }
   prints("");
  }
}
