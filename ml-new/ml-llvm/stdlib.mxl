/* NAME: printFloatTuples
   ARGUMENTS: Pointer to float tuple (@variable_name) and tuple length
   EXECUTES: Prints the values of the tuple, each on a new line
   RETURNS: VOID
*/
void printFloatTuples(float[] x,  int len) {
  int i;
  float f;

  printssl("[");

  for (i = 0; i < len; i = i + 1) {
    f = $x;
		printfsl(f);

    if (i != len - 1) {
      printssl(", ");
    }

	  x = x.+;
  }

  prints("]");
}
/* NAME: printIntTuples
   ARGUMENTS: Pointer to int tuple (@variable_name) and tuple length
   EXECUTES: Prints the values of the tuple, each on a new line
   RETURNS: VOID
*/
void printIntTuples(int[] x,  int len) {
  int i;
  int f;

  printssl("[");

  for (i = 0; i < len; i = i + 1) {
    f = $x;
		printsl(f);

    if (i != len - 1) {
      printssl(", ");
    }

		x = x.+;
  }

  prints("]");
}

/* NAME: addIntTuples
   ARGUMENTS: Pointer to int tuple (@x), Pointer to int tuple (@y),
   	          tuple length (tuples must be of the same length, so length of x or y can be passed in)
   EXECUTES: Adds the contents of y to the contents of x; updating x in memory
   RETURNS: VOID; the first tuple variable is updated in memory; nothing is returned
*/
void addIntTuples(int[] x, int[] y, int len) {
	int i;

	for (i = 0; i < len; i = i + 1) {
		$x = $x + $y; // $ dereferences the pointer
		x = x.+;      // Incrementing the pointer by 1
		y = y.+;		  // Incrementing the pointer by 1
	}
}
/* NAME: addIntMatrices
   ARGUMENTS: Pointer to int matrix (@@x), pointer to int matrix (@@y)
 	           number of rows (int), number of columns (int)
   EXECUTES: Add each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the sum.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both tuples must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void addIntMatrices(int[][] x, int[][] y, int r, int c) {
	int len;
	int i;

	len = r * c;

	for(i = 0; i < len; i = i + 1) {
		$x = $x + $y;
		x = x.+;
		y = y.+;
	}
}
/* NAME: addFloatMatrices
   ARGUMENTS: Pointer to float matrix (@@x), pointer to float matrix (@@y)
             number of rows (int), number of columns (int)
   EXECUTES: Add each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the sum.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both tuples must have the same number of rows and columns. This is why the this are
         only passed in once, because they are expected to be the same.
*/
void addFloatMatrices(float[][] x, float[][] y, int r, int c) {
  int len;
  int i;

  len = r * c;

  for(i = 0; i < len; i = i + 1) {
    $x = $x + $y;
    x = x.+;
    y = y.+;
  }
}

/* NAME: bwIntTupleMatrix
   ARGUMENTS: Pointer to float matrix (@@@x), number of rows(int), number of columns(int), length of tuple (int) number of rows (int), number of columns (int).
   EXECUTES: Makes a matrix "black" and "white" by taking each int tuple, and getting the RGB average, and updated each element in the int tuple with calculated average.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned.
   NOTE: This is intended for an int tuple matrix where the tuple's length=3.
*/

void bwIntTupleMatrix(int[][][] x, int r, int c, int l) {
  int len;
  int i;
  int j;
  int  k;
  int[3] pix;
  int el1;
  int el2;
  int el3;
  int avg;
  int[][][] a;

  len = r * c * l;

  for (i = 0; i < len / 3; i = i + 1) {
    a = x;
    el1 = $a;
    a = a.+;
    el2 = $a;
    a= a.+;
    el3 = $a;
    avg = (el1+el2+el3)/3;

    $x=avg;
    x = x.+;
    $x =avg;
    x = x.+;
    $x = avg;
    x = x.+;
  }

}


/* NAME: addIntTupleMatrices
   ARGUMENTS: Pointer to int tuple matrix (@@@x), pointer to int tuple matrix (@@@y)
             number of rows (int), number of columns (int)
   EXECUTES: Add each element in matrix x with its corresponding element
             in matrix y. Updates x in memory with the sum.
   RETURNS: VOID; the first matrix passed in is updated in memory; nothing is returned
   NOTE: Both int matrix tuples must have the same number of rows and columns and same tuple
          length. This is why the this are only passed in once, because they are
          expected to be the same.
*/
void addIntTupleMatrices(int[][][] x, int[][][] y, int r, int c, int l) {
  int len;
  int i;
  int k;

  len = r * c * l;

  for(i = 0; i < len; i = i + 1) {
    $x = $x + $y;
    x = x.+;
    y = y.+;
  }
}
/* NAME: detThree
   ARGUMENTS: Pointer to int matrix (@@x)
   EXECUTES: Calculates the determinant of a 3x3 matrix using Sarrus's rule
   RETURNS: INT; resturns the determinant (an integer)
   NOTE: Only accepts 3x3 matrix because Sarrus's Rule only for 3x3.
*/
int detThree(int[][] x){
  int a;
  int b;
  int c;
  int d;
  int e;
  int f;
  int g;
  int h;
  int i;
  int sum;
  a = $x;
  x = x.+;
  b = $x;
  x = x.+;
  c = $x;
  x = x.+;
  d = $x;
  x = x.+;
  e = $x;
  x = x.+;
  f = $x;
  x = x.+;
  g = $x;
  x = x.+;
  h = $x;
  x = x.+;
  i = $x;

  sum = (a * e * i) + (b * f * g) + (c * d * h) - (c * e * g) - (a * f * h) - (b * d * i);
  
  return sum;
}
