### Starting build.
# Target: ml.ml.depends, tags: { extension:ml, file:ml.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules ml.ml > ml.ml.depends
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends
# Target: codegen.ml.depends, tags: { extension:ml, file:codegen.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o ast.cmo ast.ml
# Target: exceptions.ml.depends, tags: { extension:ml, file:exceptions.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules exceptions.ml > exceptions.ml.depends
# Target: exceptions.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:exceptions.cmo, file:exceptions.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o exceptions.cmo exceptions.ml
# Target: parser.mly, tags: { extension:mly, file:parser.mly, infer, ocaml, ocamlyacc, package(llvm), package(llvm.analysis), package(str), parser, quiet }
/usr/local/bin/ocamlyacc parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends
# Target: scanner.mll, tags: { extension:mll, file:scanner.mll, lexer, ocaml, ocamllex, package(llvm), package(llvm.analysis), package(str), quiet }
/usr/local/bin/ocamllex.opt -q scanner.mll
# Target: scanner.ml.depends, tags: { extension:ml, file:scanner.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules scanner.ml > scanner.ml.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o parser.cmi parser.mli
# Target: semant.ml.depends, tags: { extension:ml, file:semant.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules semant.ml > semant.ml.depends
# Target: codegen.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", line 107, characters 27-7323:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
TupleAccess (_, _)
File "codegen.ml", line 20, characters 15-23:
Warning 27: unused variable includes.
# Target: scanner.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:scanner.cmo, file:scanner.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o scanner.cmo scanner.ml
# Target: semant.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:semant.cmo, file:semant.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o semant.cmo semant.ml
+ ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o semant.cmo semant.ml
File "semant.ml", line 121, characters 17-2142:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
TupleAccess (_, _)
File "semant.ml", line 12, characters 11-19:
Warning 27: unused variable includes.
# Target: ml.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ml.cmo, file:ml.ml, implem, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlc -c -w +a-4 -package str -package llvm.analysis -package llvm -o ml.cmo ml.ml
# Target: ast.cmx, tags: { compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o ast.cmx ast.ml
# Target: exceptions.cmx, tags: { compile, extension:cmx, extension:ml, file:exceptions.cmx, file:exceptions.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o exceptions.cmx exceptions.ml
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamldep -package str -package llvm.analysis -package llvm -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o parser.cmx parser.ml
# Target: codegen.cmx, tags: { compile, extension:cmx, extension:ml, file:codegen.cmx, file:codegen.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
+ ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o codegen.cmx codegen.ml
File "codegen.ml", line 107, characters 27-7323:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
TupleAccess (_, _)
File "codegen.ml", line 20, characters 15-23:
Warning 27: unused variable includes.
# Target: scanner.cmx, tags: { compile, extension:cmx, extension:ml, file:scanner.cmx, file:scanner.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o scanner.cmx scanner.ml
# Target: semant.cmx, tags: { compile, extension:cmx, extension:ml, file:semant.cmx, file:semant.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o semant.cmx semant.ml
+ ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o semant.cmx semant.ml
File "semant.ml", line 121, characters 17-2142:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a value that is not matched:
TupleAccess (_, _)
File "semant.ml", line 12, characters 11-19:
Warning 27: unused variable includes.
# Target: ml.cmx, tags: { compile, extension:cmx, extension:ml, file:ml.cmx, file:ml.ml, implem, native, ocaml, package(llvm), package(llvm.analysis), package(str), quiet }
ocamlfind ocamlopt -c -w +a-4 -package str -package llvm.analysis -package llvm -o ml.cmx ml.ml
# Target: ml.native, tags: { dont_link_with, extension:native, file:ml.native, link, native, ocaml, package(llvm), package(llvm.analysis), package(str), program, quiet }
ocamlfind ocamlopt -linkpkg -package str -package llvm.analysis -package llvm ast.cmx exceptions.cmx codegen.cmx parser.cmx scanner.cmx semant.cmx ml.cmx -o ml.native
# Compilation successful.
